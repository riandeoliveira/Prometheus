<% if (data.stateManagement === "Context API") { -%>
import { CounterContextProvider } from "contexts/CounterContext";
import { UserContextProvider } from "contexts/UserContext";
<% } -%>
<% if (data.style === "Styled Components") { -%>
import { StyledComponentsRegistry } from "lib/registry";
<% } -%>
import { Metadata } from "next";
import { Roboto } from "next/font/google";
import { ReactNode } from "react";
<% if (data.style === "CSS Modules") { -%>
import "styles/global.css";
<% } -%>
<% if (data.style === "SASS Modules") { -%>
import "styles/_global.scss";
<% } -%>
<% if (data.style === "Styled Components") { -%>
import { GlobalStyle } from "styles/global";
<% } -%>
<% if (data.style === "TailwindCSS") { -%>
import "styles/globals.css";
<% } -%>

type RootLayoutProps = {
  children: ReactNode;
};

export const metadata: Metadata = {
  authors: [{ name: "<%= data.author %>", url: "https://github.com/<%= data.githubUsername %>" }],
  description: "<%= data.description %>",
  icons: [{ rel: "icon", url: "/favicon.ico" }],
  keywords: [
<% data.keywords.forEach((keyword) => { -%>
<% const isLastElement = data.keywords.indexOf(keyword) === data.keywords.length - 1; -%>
<% if (isLastElement) { -%>
    "<%= keyword %>"
<% } else { -%>
    "<%= keyword %>",
<% } -%>
<% }); -%>
  ],
  themeColor: [{ color: "#ffffff", media: "(prefers-color-scheme: dark)" }],
  title: "<%= data.projectName %>",
};

const roboto = Roboto({
  style: "normal",
  subsets: ["latin"],
  weight: ["100", "300", "400", "500", "700", "900"],
});

<% if (data.stateManagement === "Context API" && data.style === "Styled Components") { -%>
const RootLayout = ({ children }: RootLayoutProps): JSX.Element => {
  return (
    <html lang="<%= data.language %>">
      <StyledComponentsRegistry>
        <GlobalStyle />
        <body className={roboto.className}>
          <UserContextProvider>
            <CounterContextProvider>
              {children}
            </CounterContextProvider>
          </UserContextProvider>
        </body>
      </StyledComponentsRegistry>
    </html>
  );
};
<% } else if (data.stateManagement === "Context API") { -%>
const RootLayout = ({ children }: RootLayoutProps): JSX.Element => {
  return (
    <html lang="<%= data.language %>">
      <body className={<% if (data.style === "TailwindCSS") { -%>`${roboto.className} min-h-screen animate-gradient bg-colorful bg-400`<% } else { -%>roboto.className<% } -%>}>
        <UserContextProvider>
          <CounterContextProvider>
            {children}
          </CounterContextProvider>
        </UserContextProvider>
      </body>
    </html>
  );
};
<% } else if (data.style === "Styled Components") { -%>
const RootLayout = ({ children }: RootLayoutProps): JSX.Element => {
  return (
    <html lang="<%= data.language %>">
      <StyledComponentsRegistry>
        <GlobalStyle />
        <body className={roboto.className}>{children}</body>
      </StyledComponentsRegistry>
    </html>
  );
};
<% } else { -%>
const RootLayout = ({ children }: RootLayoutProps): JSX.Element => {
  return (
    <html lang="<%= data.language %>">
      <body className={<% if (data.style === "TailwindCSS") { -%>`${roboto.className} min-h-screen animate-gradient bg-colorful bg-400`<% } else { -%>roboto.className<% } -%>}>
        {children}
      </body>
    </html>
  );
};
<% } -%>

export default RootLayout;
